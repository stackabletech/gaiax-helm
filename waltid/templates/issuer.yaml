apiVersion: v1
kind: ConfigMap
metadata:
  name: issuer-web-config
data:
  web.conf: |
    webHost = "0.0.0.0"
    webPort = 3000
  issuer-service.conf: |
    baseUrl = "https://issuer.{{.Values.domain}}"
  credential-issuer-metadata.conf: |
      supportedCredentialTypes = {
      BankId = [VerifiableCredential, BankId],
      KycChecksCredential = [VerifiableCredential, VerifiableAttestation, KycChecksCredential],
      KycCredential = [VerifiableCredential, VerifiableAttestation, KycCredential],
      KycDataCredential = [VerifiableCredential, VerifiableAttestation, KycDataCredential],
      PassportCh = [VerifiableCredential, VerifiableAttestation, VerifiableId, PassportCh],
      PND91Credential = [VerifiableCredential, PND91Credential],
      MortgageEligibility = [VerifiableCredential, VerifiableAttestation, VerifiableId, MortgageEligibility],
      PortableDocumentA1 = [VerifiableCredential, VerifiableAttestation, PortableDocumentA1],
      OpenBadgeCredential = [VerifiableCredential, OpenBadgeCredential],
      VaccinationCertificate = [VerifiableCredential, VerifiableAttestation, VaccinationCertificate],
      WalletHolderCredential = [VerifiableCredential, WalletHolderCredential],
      UniversityDegree = [VerifiableCredential, UniversityDegree],
      VerifiableId = [VerifiableCredential, VerifiableAttestation, VerifiableId],
      CTWalletSameAuthorisedInTime = [VerifiableCredential, VerifiableAttestation, CTWalletSameAuthorisedInTime],
      CTWalletSameAuthorisedDeferred = [VerifiableCredential, VerifiableAttestation, CTWalletSameAuthorisedDeferred],
      CTWalletSamePreAuthorisedInTime = [VerifiableCredential, VerifiableAttestation, CTWalletSamePreAuthorisedInTime],
      CTWalletSamePreAuthorisedDeferred = [VerifiableCredential, VerifiableAttestation, CTWalletSamePreAuthorisedDeferred],
      AlpsTourReservation = [VerifiableCredential, VerifiableAttestation, AlpsTourReservation],
      EducationalID = [VerifiableCredential, VerifiableAttestation, EducationalID],
      HotelReservation = [VerifiableCredential, VerifiableAttestation, HotelReservation],
      Iso18013DriversLicenseCredential = [VerifiableCredential, VerifiableAttestation, Iso18013DriversLicenseCredential],
      TaxReceipt = [VerifiableCredential, VerifiableAttestation, TaxReceipt],
      VerifiablePortableDocumentA1 = [VerifiableCredential, VerifiableAttestation, VerifiablePortableDocumentA1],
      Visa = [VerifiableCredential, VerifiableAttestation, Visa],
      eID = [VerifiableCredential, VerifiableAttestation, eID],
      NaturalPersonVerifiableID = [VerifiableCredential, VerifiableAttestation, NaturalPersonVerifiableID],
      BoardingPass = [VerifiableCredential, VerifiableAttestation, BoardingPass]

      "org.iso.18013.5.1.mDL" = {
          format = mso_mdoc
          cryptographic_binding_methods_supported = ["cose_key"]
          credential_signing_alg_values_supported = ["ES256"]
          proof_types_supported = { cwt = { proof_signing_alg_values_supported = ["ES256"] } }
          doctype = "org.iso.18013.5.1.mDL"
      }

      "urn:eu.europa.ec.eudi:pid:1" = {
          format = "vc+sd-jwt"
          cryptographic_binding_methods_supported = ["jwk"]
          credential_signing_alg_values_supported = ["ES256"]
          vct = "https://issuer.{{.Values.domain}}/urn:eu.europa.ec.eudi:pid:1"
      }

      "identity_credential_vc+sd-jwt" = {
          format = "vc+sd-jwt",
          cryptographic_binding_methods_supported = ["jwk"]
          credential_signing_alg_values_supported = ["ES256"]
          vct = "https://issuer.{{.Values.domain}}/identity_credential"
      }}

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: issuer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: issuer
  template:
    metadata:
      labels:
        app: issuer
    spec:
      containers:
        - name: issuer
          image: waltid/
          volumeMounts:
            - name: issuer-web-config
              mountPath: "/waltid-issuer-api/config/"
              readOnly: true
          ports:
            - containerPort: 3000
              name: http-api
      volumes:
        - name: issuer-web-config
          configMap:
            name: issuer-web-config
---
kind: Service
apiVersion: v1
metadata:
  name: issuer
spec:
  ports:
    - name: http
      port: 80
      targetPort: http-api
      protocol: TCP
  selector:
    app: issuer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: issuer
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - issuer.{{.Values.domain}}
      secretName: ingress-issuer
  rules:
    - host: issuer.{{.Values.domain}}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: issuer
                port:
                  name: http
